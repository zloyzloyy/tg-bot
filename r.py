# bot.py
# –ü–æ–ª–Ω—ã–π Telegram-–±–æ—Ç –ø–æ –¢–ó (aiogram 3.7+)
# –í–ù–ò–ú–ê–ù–ò–ï: –≤—Å–µ –∫–Ω–æ–ø–∫–∏ ‚Äì inline –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏; –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ A‚ÄìD,
# –æ—Å—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" –∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é".
# –•—Ä–∞–Ω–∏–ª–∏—â–µ: SQLite ("ads.db"). –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–∞–∫ file_id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
# –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞/—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –ª–∞–π–∫–∞.
# –§–∏–ª—å—Ç—Ä –ø–æ —É—á–µ–±–Ω–æ–º—É –∑–∞–≤–µ–¥–µ–Ω–∏—é –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–µ–Ω—Ç—ã: –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø—Ä–µ–¥–º–µ—Ç–∞ ‚Äî –≤—ã–±–æ—Ä "–ú–æ—Å–∫–≤–∞" –∏–ª–∏ "–í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë".
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –¢–ó.

import asyncio
import logging
import sqlite3
from typing import List, Dict, Any, Optional

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
)

API_TOKEN = "8342403001:AAHnSqngTU3j0z5WE6uIBH_U5I5oh3qG9NI"

# ----------------------- –õ–û–ì–ò -----------------------
logging.basicConfig(level=logging.INFO)

# ----------------------- –ë–î ------------------------
conn = sqlite3.connect("ads.db")
cur = conn.cursor()

cur.execute("""
CREATE TABLE IF NOT EXISTS goods(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    title TEXT NOT NULL,
    category TEXT NOT NULL,
    condition TEXT NOT NULL,
    description TEXT NOT NULL,
    price TEXT NOT NULL,
    photos TEXT DEFAULT '',
    nickname TEXT NOT NULL,
    school TEXT NOT NULL
)
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS tutors(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    subject TEXT NOT NULL,
    school TEXT NOT NULL,
    achievements TEXT NOT NULL,
    details TEXT NOT NULL,
    price TEXT NOT NULL,
    photos TEXT DEFAULT '',
    nickname TEXT NOT NULL
)
""")
conn.commit()

# ----------------------- –ö–û–ù–°–¢–ê–ù–¢–´ ------------------------
# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
GOODS_CATEGORIES = [
    "üß• –•—É–¥–∞–∫",     # —Ö—É–¥–∏/—Ö—É–¥–∞–∫
    "üëñ –î–∂–∏–Ω—Å—ã",
    "üëï –§—É—Ç–±–æ–ª–∫–∞",
    "‚úèÔ∏è –ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è",
    "üíª –¢–µ—Ö–Ω–∏–∫–∞",
    "üëó –û–¥–µ–∂–¥–∞",
    "üì¶ –î—Ä—É–≥–æ–µ"
]

# –ü—Ä–µ–¥–º–µ—Ç—ã (—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã)
TUTOR_SUBJECTS = [
    "üìê –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    "üìò –†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    "üß¨ –ë–∏–æ–ª–æ–≥–∏—è",
    "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫",
    "üî≠ –§–∏–∑–∏–∫–∞",
    "üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "‚öñÔ∏è –ü—Ä–∞–≤–æ",
    "üìú –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
    "üè∫ –ò—Å—Ç–æ—Ä–∏—è",
    "‚öóÔ∏è –•–∏–º–∏—è",
    "üó∫ –ì–µ–æ–≥—Ä–∞—Ñ–∏—è",
    "üìö –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    "‚ûó –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
]

SUPPORT_NICK = "@zloyzloyy"

# ----------------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ------------------------
def kb_main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–º–æ—Ç—Ä–µ—Ç—å –ª–µ–Ω—Ç—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π", callback_data="menu_feed")],
        [InlineKeyboardButton(text="üõí –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ", callback_data="menu_create_good")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞", callback_data="menu_find_tutor")],
        [InlineKeyboardButton(text="üéì –†–∞–∑–º–µ—â–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞", callback_data="menu_create_tutor")],
        [InlineKeyboardButton(text="üìÇ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="menu_my_ads")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")]
    ])

def kb_back_support() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")]
    ])

def kb_goods_categories(include_nav=True) -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text=cat, callback_data=f"feed_cat_{cat}") ] for cat in GOODS_CATEGORIES]
    if include_nav:
        rows += [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")],
                 [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")]]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_tutor_subjects(include_nav=True) -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text=sub, callback_data=f"feed_sub_{sub}") ] for sub in TUTOR_SUBJECTS]
    if include_nav:
        rows += [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")],
                 [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")]]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kb_school_selector(prefix: str) -> InlineKeyboardMarkup:
    # prefix: "feed" (–ø–æ–∏—Å–∫), "good" (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞), "tutor" (—Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞)
    # –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –ú–æ—Å–∫–≤–∞ (–≤—Å–µ –≤—É–∑—ã/—à–∫–æ–ª—ã –≤–Ω—É—Ç—Ä–∏ –ú–°–ö) –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ë
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèô –ú–æ—Å–∫–≤–∞ (–≤—Å–µ –≤–Ω—É—Ç—Ä–∏ –ú–°–ö)", callback_data=f"{prefix}_school_moscow")],
        [InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë —É—á–µ–±–Ω–æ–µ", callback_data=f"{prefix}_school_custom")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")],
    ])

def kb_like_dislike(ad_type: str, ad_id: int) -> InlineKeyboardMarkup:
    # ad_type: "goods" | "tutors"
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"like_{ad_type}_{ad_id}"),
            InlineKeyboardButton(text="üëé –î–∞–ª—å—à–µ", callback_data=f"dis_{ad_type}_{ad_id}")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")],
    ])

def kb_confirm() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_publish")],
        [InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="confirm_edit")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")],
    ])

def kb_my_ads_entry() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã", callback_data="my_goods")],
        [InlineKeyboardButton(text="üßë‚Äçüè´ –ú–æ–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã", callback_data="my_tutors")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")],
    ])

def kb_my_ad_controls(ad_type: str, idx: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"my_edit_{ad_type}_{idx}")],
        [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data=f"my_next_{ad_type}_{idx}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")],
    ])

def kb_photos_controls(prefix: str) -> InlineKeyboardMarkup:
    # –î–ª—è —à–∞–≥–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏—ë–º –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ (1‚Äì3 —Ñ–æ—Ç–æ)", callback_data=f"{prefix}_photos_done")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"{prefix}_photos_skip")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")],
    ])

# ----------------------- FEED –°–û–°–¢–û–Ø–ù–ò–ï ------------------------
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ª–µ–Ω—Ç—ã (–ø–æ –æ–¥–Ω–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é)
# feed_state[user_id] = {
#   "type": "goods"|"tutors",
#   "category" or "subject": str,
#   "school_filter": "–ú–æ—Å–∫–≤–∞" | str,
#   "ids": [list of ids],
#   "i": current index (int)
# }
feed_state: Dict[int, Dict[str, Any]] = {}

# –°–æ—Å—Ç–æ—è–Ω–∏–µ "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
# my_state[user_id] = {"type": "goods"|"tutors", "ids":[...], "i": int}
my_state: Dict[int, Dict[str, Any]] = {}

# ----------------------- FSM –°–û–ó–î–ê–ù–ò–Ø ------------------------
class GoodFSM(StatesGroup):
    title = State()
    category = State()
    condition = State()
    description = State()
    price = State()
    photos = State()
    nickname = State()
    school_choice = State()  # –≤—ã–±–æ—Ä –ú–æ—Å–∫–≤–∞ / –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ë
    school = State()
    confirm = State()
    editing = State()  # –ø—Ä–∏–∑–Ω–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ö—Ä–∞–Ω–∏–º —Ñ–ª–∞–≥ –≤ data)

class TutorFSM(StatesGroup):
    name = State()
    subject = State()
    school_choice = State()
    school = State()
    achievements = State()
    details = State()
    price = State()
    photos = State()
    nickname = State()
    confirm = State()
    editing = State()

# ----------------------- –ó–ê–ü–£–°–ö ------------------------
bot = Bot(API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# ----------------------- –°–¢–ê–†–¢ + –ú–ï–ù–Æ ------------------------
@router.message(CommandStart())
async def start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=kb_main_menu()
    )

@router.callback_query(F.data == "menu_back")
async def menu_back(call: CallbackQuery, state: FSMContext):
    await state.clear()
    feed_state.pop(call.from_user.id, None)
    my_state.pop(call.from_user.id, None)
    await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main_menu())
    await call.answer()

@router.callback_query(F.data == "menu_support")
async def menu_support(call: CallbackQuery):
    await call.message.answer(
        f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {SUPPORT_NICK}",
        reply_markup=kb_back_support()
    )
    await call.answer()

# ======================= –†–ê–ó–î–ï–õ A: –õ–ï–ù–¢–ê –¢–û–í–ê–†–û–í =======================
@router.callback_query(F.data == "menu_feed")
async def menu_feed(call: CallbackQuery):
    await call.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=kb_goods_categories()
    )
    await call.answer()

@router.callback_query(F.data.startswith("feed_cat_"))
async def feed_choose_category(call: CallbackQuery, state: FSMContext):
    cat = call.data.replace("feed_cat_", "")
    # –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –≤—ã–±–æ—Ä —à–∫–æ–ª—ã/–≤—É–∑–∞: –ú–æ—Å–∫–≤–∞ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ë
    await call.message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{cat}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —É—á–µ–±–Ω–æ–º—É –∑–∞–≤–µ–¥–µ–Ω–∏—é:",
        reply_markup=kb_school_selector(prefix="feed_goods")
    )
    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
    await state.update_data(feed_type="goods", feed_category=cat)
    await call.answer()

@router.callback_query(F.data.in_(["feed_goods_school_moscow", "feed_goods_school_custom"]))
async def feed_goods_school_filter(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cat = data.get("feed_category")
    if call.data.endswith("moscow"):
        school = "–ú–æ—Å–∫–≤–∞"
        await begin_goods_feed(call, category=cat, school_filter=school)
        await call.answer()
    else:
        # –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º
        await state.update_data(feed_school_mode="custom")
        await call.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã/–í–£–ó–∞ (—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ):",
            reply_markup=kb_back_support()
        )
        await state.set_state(GoodFSM.school)  # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –ø—Ä–∏–µ–º–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–∏—Å–∫–µ
        await call.answer()

@router.message(StateFilter(GoodFSM.school))
async def feed_goods_school_entered(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("feed_type") == "goods":
        cat = data.get("feed_category")
        school = message.text.strip()
        await begin_goods_feed_from_message(message, category=cat, school_filter=school)
        await state.clear()

async def begin_goods_feed(call: CallbackQuery, category: str, school_filter: str):
    cur.execute(
        "SELECT id, title, condition, description, price, photos, nickname, school "
        "FROM goods WHERE category=? AND ( ( ?='–ú–æ—Å–∫–≤–∞' AND lower(school) LIKE '%–º–æ—Å–∫%' ) OR lower(school)=lower(?) ) "
        "ORDER BY id DESC",
        (category, school_filter, school_filter)
    )
    rows = cur.fetchall()
    uid = call.from_user.id
    feed_state[uid] = {"type": "goods", "category": category, "school_filter": school_filter, "ids": [r[0] for r in rows], "i": 0}
    if not rows:
        await call.message.answer("–ü–æ–∫–∞ —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –Ω–µ—Ç.", reply_markup=kb_back_support())
        return
    await show_good_by_row(call.message, rows[0])

async def begin_goods_feed_from_message(message: Message, category: str, school_filter: str):
    cur.execute(
        "SELECT id, title, condition, description, price, photos, nickname, school "
        "FROM goods WHERE category=? AND ( ( ?='–ú–æ—Å–∫–≤–∞' AND lower(school) LIKE '%–º–æ—Å–∫%' ) OR lower(school)=lower(?) ) "
        "ORDER BY id DESC",
        (category, school_filter, school_filter)
    )
    rows = cur.fetchall()
    uid = message.from_user.id
    feed_state[uid] = {"type": "goods", "category": category, "school_filter": school_filter, "ids": [r[0] for r in rows], "i": 0}
    if not rows:
        await message.answer("–ü–æ–∫–∞ —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –Ω–µ—Ç.", reply_markup=kb_back_support())
        return
    await show_good_by_row(message, rows[0])

async def show_good_by_row(target_message: Message, row: tuple):
    # row: (id, title, condition, description, price, photos, nickname, school)
    photos = (row[5] or "").split(",") if row[5] else []
    caption = (
        f"<b>{row[1]}</b>\n"
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {row[2]}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {row[3]}\n"
        f"–¶–µ–Ω–∞: {row[4]}"
    )
    if photos:
        await target_message.answer_photo(
            photo=photos[0],
            caption=caption,
            reply_markup=kb_like_dislike("goods", row[0])
        )
    else:
        await target_message.answer(
            caption,
            reply_markup=kb_like_dislike("goods", row[0])
        )

@router.callback_query(F.data.startswith("like_goods_"))
async def like_goods(call: CallbackQuery):
    ad_id = int(call.data.split("_")[-1])
    # –ù–∞ –ª–∞–π–∫: –ø–æ–∫–∞–∑–∞—Ç—å @–Ω–∏–∫ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é
    cur.execute("SELECT nickname FROM goods WHERE id=?", (ad_id,))
    row = cur.fetchone()
    if row:
        await call.message.answer(f"–ö–æ–Ω—Ç–∞–∫—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞: {row[0]}")
    await show_next_in_feed(call)
    await call.answer()

@router.callback_query(F.data.startswith("dis_goods_"))
async def dislike_goods(call: CallbackQuery):
    await show_next_in_feed(call)
    await call.answer()

async def show_next_in_feed(call: CallbackQuery):
    uid = call.from_user.id
    st = feed_state.get(uid)
    if not st:
        await call.message.answer("–õ–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=kb_back_support())
        return
    st["i"] += 1
    ids = st["ids"]
    if st["i"] >= len(ids):
        await call.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", reply_markup=kb_back_support())
        return
    ad_type = st["type"]
    next_id = ids[st["i"]]
    if ad_type == "goods":
        cur.execute(
            "SELECT id, title, condition, description, price, photos, nickname, school FROM goods WHERE id=?",
            (next_id,)
        )
        row = cur.fetchone()
        if row:
            await show_good_by_row(call.message, row)
    else:
        cur.execute(
            "SELECT id, name, subject, school, achievements, details, price, photos, nickname FROM tutors WHERE id=?",
            (next_id,)
        )
        row = cur.fetchone()
        if row:
            await show_tutor_by_row(call.message, row)

# ======================= –†–ê–ó–î–ï–õ –ë: –°–û–ó–î–ê–ù–ò–ï –¢–û–í–ê–†–ê =======================
@router.callback_query(F.data == "menu_create_good")
async def create_good_start(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(GoodFSM.title)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b> —Ç–æ–≤–∞—Ä–∞:", reply_markup=kb_back_support())
    await call.answer()

@router.message(StateFilter(GoodFSM.title))
async def good_title_step(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await state.set_state(GoodFSM.category)
    # –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat, callback_data=f"good_cat_{cat}") ] for cat in GOODS_CATEGORIES
    ] + [
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—é</b>:", reply_markup=kb)

@router.callback_query(StateFilter(GoodFSM.category), F.data.startswith("good_cat_"))
async def good_category_step(call: CallbackQuery, state: FSMContext):
    category = call.data.replace("good_cat_", "")
    await state.update_data(category=category)
    await state.set_state(GoodFSM.condition)
    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—â–∏</b>:", reply_markup=kb_back_support())
    await call.answer()

@router.message(StateFilter(GoodFSM.condition))
async def good_condition_step(message: Message, state: FSMContext):
    await state.update_data(condition=message.text.strip())
    await state.set_state(GoodFSM.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>:", reply_markup=kb_back_support())

@router.message(StateFilter(GoodFSM.description))
async def good_description_step(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await state.set_state(GoodFSM.price)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>:", reply_markup=kb_back_support())

@router.message(StateFilter(GoodFSM.price))
async def good_price_step(message: Message, state: FSMContext):
    await state.update_data(price=message.text.strip(), photos=[])
    await state.set_state(GoodFSM.photos)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ 1‚Äì3 <b>—Ñ–æ—Ç–æ</b> (–ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=kb_photos_controls(prefix="good")
    )

@router.message(StateFilter(GoodFSM.photos), F.photo)
async def good_photos_collect(message: Message, state: FSMContext):
    data = await state.get_data()
    photos: List[str] = data.get("photos", [])
    if len(photos) >= 3:
        await message.answer("–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ 3 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=kb_photos_controls(prefix="good"))
        return
    file_id = message.photo[-1].file_id
    photos.append(file_id)
    await state.update_data(photos=photos)
    await message.answer(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(photos)}/3).", reply_markup=kb_photos_controls(prefix="good"))

@router.callback_query(StateFilter(GoodFSM.photos), F.data == "good_photos_done")
async def good_photos_done(call: CallbackQuery, state: FSMContext):
    await state.set_state(GoodFSM.nickname)
    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ <b>–Ω–∏–∫ –≤ Telegram</b> (–Ω–∞—á–∏–Ω–∞—è —Å @):", reply_markup=kb_back_support())
    await call.answer()

@router.callback_query(StateFilter(GoodFSM.photos), F.data == "good_photos_skip")
async def good_photos_skip(call: CallbackQuery, state: FSMContext):
    await state.update_data(photos=[])
    await state.set_state(GoodFSM.nickname)
    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ <b>–Ω–∏–∫ –≤ Telegram</b> (–Ω–∞—á–∏–Ω–∞—è —Å @):", reply_markup=kb_back_support())
    await call.answer()

@router.message(StateFilter(GoodFSM.nickname))
async def good_nick_step(message: Message, state: FSMContext):
    nick = message.text.strip()
    if not nick.startswith("@"):
        await message.answer("–ù–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:", reply_markup=kb_back_support())
        return
    await state.update_data(nickname=nick)
    await state.set_state(GoodFSM.school_choice)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=kb_school_selector(prefix="good")
    )

@router.callback_query(StateFilter(GoodFSM.school_choice), F.data.in_(["good_school_moscow", "good_school_custom"]))
async def good_school_choice(call: CallbackQuery, state: FSMContext):
    if call.data.endswith("moscow"):
        await state.update_data(school="–ú–æ—Å–∫–≤–∞")
        await show_good_confirm(call.message, state)
    else:
        await state.set_state(GoodFSM.school)
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —à–∫–æ–ª—ã/–í–£–ó–∞:", reply_markup=kb_back_support())
    await call.answer()

@router.message(StateFilter(GoodFSM.school))
async def good_school_text(message: Message, state: FSMContext):
    await state.update_data(school=message.text.strip())
    await show_good_confirm(message, state)

async def show_good_confirm(target, state: FSMContext):
    await state.set_state(GoodFSM.confirm)
    data = await state.get_data()
    title = data["title"]
    category = data["category"]
    condition = data["condition"]
    description = data["description"]
    price = data["price"]
    photos: List[str] = data.get("photos", [])
    nickname = data["nickname"]
    school = data["school"]

    caption = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n"
        f"<b>{title}</b>\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {condition}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"–¶–µ–Ω–∞: {price}\n"
        f"–®–∫–æ–ª–∞/–í–£–ó: {school}\n"
        f"–ù–∏–∫ (—Å–∫—Ä–æ–µ—Ç—Å—è –≤ –ª–µ–Ω—Ç–µ): {nickname}"
    )
    if photos:
        await target.answer_photo(photos[0], caption=caption, reply_markup=kb_confirm())
    else:
        await target.answer(caption, reply_markup=kb_confirm())

@router.callback_query(StateFilter(GoodFSM.confirm), F.data == "confirm_publish")
async def good_publish(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    editing_id = data.get("editing_id")
    if editing_id:
        cur.execute(
            "UPDATE goods SET title=?, category=?, condition=?, description=?, price=?, photos=?, nickname=?, school=? "
            "WHERE id=?",
            (
                data["title"], data["category"], data["condition"], data["description"], data["price"],
                ",".join(data.get("photos", [])), data["nickname"], data["school"], editing_id
            )
        )
    else:
        cur.execute(
            "INSERT INTO goods(user_id, title, category, condition, description, price, photos, nickname, school) "
            "VALUES(?,?,?,?,?,?,?,?,?)",
            (
                call.from_user.id, data["title"], data["category"], data["condition"], data["description"],
                data["price"], ",".join(data.get("photos", [])), data["nickname"], data["school"]
            )
        )
    conn.commit()
    await call.message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", reply_markup=kb_back_support())
    await state.clear()
    await call.answer()

@router.callback_query(StateFilter(GoodFSM.confirm), F.data == "confirm_edit")
async def good_edit_restart(call: CallbackQuery, state: FSMContext):
    # "–ü–æ –∫—Ä—É–≥—É" ‚Äì –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ —Å –ù–∞–∑–≤–∞–Ω–∏—è
    await state.set_state(GoodFSM.title)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b> —Ç–æ–≤–∞—Ä–∞:", reply_markup=kb_back_support())
    await call.answer()

# ======================= –†–ê–ó–î–ï–õ –í: –ü–û–ò–°–ö –†–ï–ü–ï–¢–ò–¢–û–†–ê (–õ–ï–ù–¢–ê) =======================
@router.callback_query(F.data == "menu_find_tutor")
async def menu_find_tutor(call: CallbackQuery):
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=kb_tutor_subjects())
    await call.answer()

@router.callback_query(F.data.startswith("feed_sub_"))
async def feed_choose_subject(call: CallbackQuery, state: FSMContext):
    sub = call.data.replace("feed_sub_", "")
    await state.update_data(feed_type="tutors", feed_subject=sub)
    await call.message.answer(
        f"–ü—Ä–µ–¥–º–µ—Ç: <b>{sub}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —É—á–µ–±–Ω–æ–º—É –∑–∞–≤–µ–¥–µ–Ω–∏—é:",
        reply_markup=kb_school_selector(prefix="feed_tutors")
    )
    await call.answer()

@router.callback_query(F.data.in_(["feed_tutors_school_moscow", "feed_tutors_school_custom"]))
async def feed_tutors_school_filter(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    sub = data.get("feed_subject")
    if call.data.endswith("moscow"):
        school = "–ú–æ—Å–∫–≤–∞"
        await begin_tutors_feed(call, subject=sub, school_filter=school)
        await call.answer()
    else:
        await state.update_data(feed_school_mode="custom_tutor")
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã/–í–£–ó–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞:", reply_markup=kb_back_support())
        await state.set_state(TutorFSM.school)  # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –ø—Ä–∏–µ–º–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–∏—Å–∫–µ
        await call.answer()

@router.message(StateFilter(TutorFSM.school))
async def feed_tutors_school_entered(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("feed_type") == "tutors":
        sub = data.get("feed_subject")
        school = message.text.strip()
        await begin_tutors_feed_from_message(message, subject=sub, school_filter=school)
        await state.clear()

async def begin_tutors_feed(call: CallbackQuery, subject: str, school_filter: str):
    cur.execute(
        "SELECT id, name, subject, school, achievements, details, price, photos, nickname "
        "FROM tutors WHERE subject=? AND ( ( ?='–ú–æ—Å–∫–≤–∞' AND lower(school) LIKE '%–º–æ—Å–∫%' ) OR lower(school)=lower(?) ) "
        "ORDER BY id DESC",
        (subject, school_filter, school_filter)
    )
    rows = cur.fetchall()
    uid = call.from_user.id
    feed_state[uid] = {"type": "tutors", "subject": subject, "school_filter": school_filter, "ids": [r[0] for r in rows], "i": 0}
    if not rows:
        await call.message.answer("–ü–æ–∫–∞ —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –∏ —É—á–µ–±–Ω–æ–º—É –∑–∞–≤–µ–¥–µ–Ω–∏—é –Ω–µ—Ç.", reply_markup=kb_back_support())
        return
    await show_tutor_by_row(call.message, rows[0])

async def begin_tutors_feed_from_message(message: Message, subject: str, school_filter: str):
    cur.execute(
        "SELECT id, name, subject, school, achievements, details, price, photos, nickname "
        "FROM tutors WHERE subject=? AND ( ( ?='–ú–æ—Å–∫–≤–∞' AND lower(school) LIKE '%–º–æ—Å–∫%' ) OR lower(school)=lower(?) ) "
        "ORDER BY id DESC",
        (subject, school_filter, school_filter)
    )
    rows = cur.fetchall()
    uid = message.from_user.id
    feed_state[uid] = {"type": "tutors", "subject": subject, "school_filter": school_filter, "ids": [r[0] for r in rows], "i": 0}
    if not rows:
        await message.answer("–ü–æ–∫–∞ —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –∏ —É—á–µ–±–Ω–æ–º—É –∑–∞–≤–µ–¥–µ–Ω–∏—é –Ω–µ—Ç.", reply_markup=kb_back_support())
        return
    await show_tutor_by_row(message, rows[0])

async def show_tutor_by_row(target_message: Message, row: tuple):
    # row: (id, name, subject, school, achievements, details, price, photos, nickname)
    photos = (row[7] or "").split(",") if row[7] else []
    caption = (
        f"<b>{row[1]}</b>\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {row[2]}\n"
        f"–®–∫–æ–ª–∞/–í–£–ó: {row[3]}\n"
        f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {row[4]}\n"
        f"–û–±—É—á–µ–Ω–∏–µ: {row[5]}\n"
        f"–¶–µ–Ω–∞ (—Ä/—á–∞—Å): {row[6]}"
    )
    if photos:
        await target_message.answer_photo(
            photo=photos[0],
            caption=caption,
            reply_markup=kb_like_dislike("tutors", row[0])
        )
    else:
        await target_message.answer(
            caption,
            reply_markup=kb_like_dislike("tutors", row[0])
        )

@router.callback_query(F.data.startswith("like_tutors_"))
async def like_tutors(call: CallbackQuery):
    ad_id = int(call.data.split("_")[-1])
    cur.execute("SELECT nickname FROM tutors WHERE id=?", (ad_id,))
    row = cur.fetchone()
    if row:
        await call.message.answer(f"–ö–æ–Ω—Ç–∞–∫—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞: {row[0]}")
    await show_next_in_feed(call)
    await call.answer()

@router.callback_query(F.data.startswith("dis_tutors_"))
async def dislike_tutors(call: CallbackQuery):
    await show_next_in_feed(call)
    await call.answer()

# ======================= –†–ê–ó–î–ï–õ –ì: –†–ê–ó–ú–ï–©–ï–ù–ò–ï –†–ï–ü–ï–¢–ò–¢–û–†–ê =======================
@router.callback_query(F.data == "menu_create_tutor")
async def create_tutor_start(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(TutorFSM.name)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–ò–º—è</b>:", reply_markup=kb_back_support())
    await call.answer()

@router.message(StateFilter(TutorFSM.name))
async def tutor_name_step(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(TutorFSM.subject)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=sub, callback_data=f"tutor_sub_{sub}") ] for sub in TUTOR_SUBJECTS
    ] + [
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")],
        [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="menu_support")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ <b>–ü—Ä–µ–¥–º–µ—Ç</b>:", reply_markup=kb)

@router.callback_query(StateFilter(TutorFSM.subject), F.data.startswith("tutor_sub_"))
async def tutor_subject_step(call: CallbackQuery, state: FSMContext):
    sub = call.data.replace("tutor_sub_", "")
    await state.update_data(subject=sub)
    # –≤—ã–±–æ—Ä —à–∫–æ–ª—ã: –ú–æ—Å–∫–≤–∞ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ë (–∫–∞–∫ –ø—Ä–æ—Å–∏–ª–∏ ‚Äî –∫–Ω–æ–ø–∫–∞–º–∏ –ø—É—Ç—å –≤—ã–±–æ—Ä–∞)
    await state.set_state(TutorFSM.school_choice)
    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ:", reply_markup=kb_school_selector(prefix="tutor"))
    await call.answer()

@router.callback_query(StateFilter(TutorFSM.school_choice), F.data.in_(["tutor_school_moscow", "tutor_school_custom"]))
async def tutor_school_choice(call: CallbackQuery, state: FSMContext):
    if call.data.endswith("moscow"):
        await state.update_data(school="–ú–æ—Å–∫–≤–∞")
        await state.set_state(TutorFSM.achievements)
        await call.message.answer("–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ <b>–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>:", reply_markup=kb_back_support())
    else:
        await state.set_state(TutorFSM.school)
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã/–í–£–ó–∞ (–ø—Ä–∏–º–µ—Ä: –ú–ì–£, 2 –∫—É—Ä—Å):", reply_markup=kb_back_support())
    await call.answer()

@router.message(StateFilter(TutorFSM.school))
async def tutor_school_text(message: Message, state: FSMContext):
    await state.update_data(school=message.text.strip())
    await state.set_state(TutorFSM.achievements)
    await message.answer("–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ <b>–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>:", reply_markup=kb_back_support())

@router.message(StateFilter(TutorFSM.achievements))
async def tutor_achievements_step(message: Message, state: FSMContext):
    await state.update_data(achievements=message.text.strip())
    await state.set_state(TutorFSM.details)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ <b>–æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –æ–±—É—á–µ–Ω–∏—è</b>:", reply_markup=kb_back_support())

@router.message(StateFilter(TutorFSM.details))
async def tutor_details_step(message: Message, state: FSMContext):
    await state.update_data(details=message.text.strip())
    await state.set_state(TutorFSM.price)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ <b>—Ü–µ–Ω—É –∑–∞ —Ä/—á–∞—Å</b>:", reply_markup=kb_back_support())

@router.message(StateFilter(TutorFSM.price))
async def tutor_price_step(message: Message, state: FSMContext):
    await state.update_data(price=message.text.strip(), photos=[])
    await state.set_state(TutorFSM.photos)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ 1‚Äì3 <b>—Ñ–æ—Ç–æ</b> (–ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª. –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=kb_photos_controls(prefix="tutor")
    )

@router.message(StateFilter(TutorFSM.photos), F.photo)
async def tutor_photos_collect(message: Message, state: FSMContext):
    data = await state.get_data()
    photos: List[str] = data.get("photos", [])
    if len(photos) >= 3:
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ 3 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.", reply_markup=kb_photos_controls(prefix="tutor"))
        return
    file_id = message.photo[-1].file_id
    photos.append(file_id)
    await state.update_data(photos=photos)
    await message.answer(f"–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ({len(photos)}/3).", reply_markup=kb_photos_controls(prefix="tutor"))

@router.callback_query(StateFilter(TutorFSM.photos), F.data == "tutor_photos_done")
async def tutor_photos_done(call: CallbackQuery, state: FSMContext):
    await state.set_state(TutorFSM.nickname)
    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ <b>–Ω–∏–∫ –≤ Telegram</b> (–Ω–∞—á–∏–Ω–∞—è —Å @):", reply_markup=kb_back_support())
    await call.answer()

@router.callback_query(StateFilter(TutorFSM.photos), F.data == "tutor_photos_skip")
async def tutor_photos_skip(call: CallbackQuery, state: FSMContext):
    await state.update_data(photos=[])
    await state.set_state(TutorFSM.nickname)
    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ <b>–Ω–∏–∫ –≤ Telegram</b> (–Ω–∞—á–∏–Ω–∞—è —Å @):", reply_markup=kb_back_support())
    await call.answer()

@router.message(StateFilter(TutorFSM.nickname))
async def tutor_nick_step(message: Message, state: FSMContext):
    nick = message.text.strip()
    if not nick.startswith("@"):
        await message.answer("–ù–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:", reply_markup=kb_back_support())
        return
    await state.update_data(nickname=nick)
    await show_tutor_confirm(message, state)

async def show_tutor_confirm(target, state: FSMContext):
    await state.set_state(TutorFSM.confirm)
    data = await state.get_data()
    name = data["name"]
    subject = data["subject"]
    school = data["school"]
    achievements = data["achievements"]
    details = data["details"]
    price = data["price"]
    photos: List[str] = data.get("photos", [])
    nickname = data["nickname"]

    caption = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n"
        f"<b>{name}</b>\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
        f"–®–∫–æ–ª–∞/–í–£–ó: {school}\n"
        f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {achievements}\n"
        f"–û–±—É—á–µ–Ω–∏–µ: {details}\n"
        f"–¶–µ–Ω–∞ (—Ä/—á–∞—Å): {price}\n"
        f"–ù–∏–∫ (—Å–∫—Ä–æ–µ—Ç—Å—è –≤ –ª–µ–Ω—Ç–µ): {nickname}"
    )
    if photos:
        await target.answer_photo(photos[0], caption=caption, reply_markup=kb_confirm())
    else:
        await target.answer(caption, reply_markup=kb_confirm())

@router.callback_query(StateFilter(TutorFSM.confirm), F.data == "confirm_publish")
async def tutor_publish(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    editing_id = data.get("editing_id")
    if editing_id:
        cur.execute(
            "UPDATE tutors SET name=?, subject=?, school=?, achievements=?, details=?, price=?, photos=?, nickname=? "
            "WHERE id=?",
            (
                data["name"], data["subject"], data["school"], data["achievements"], data["details"],
                data["price"], ",".join(data.get("photos", [])), data["nickname"], editing_id
            )
        )
    else:
        cur.execute(
            "INSERT INTO tutors(user_id, name, subject, school, achievements, details, price, photos, nickname) "
            "VALUES(?,?,?,?,?,?,?,?,?)",
            (
                call.from_user.id, data["name"], data["subject"], data["school"], data["achievements"], data["details"],
                data["price"], ",".join(data.get("photos", [])), data["nickname"]
            )
        )
    conn.commit()
    await call.message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", reply_markup=kb_back_support())
    await state.clear()
    await call.answer()

@router.callback_query(StateFilter(TutorFSM.confirm), F.data == "confirm_edit")
async def tutor_edit_restart(call: CallbackQuery, state: FSMContext):
    await state.set_state(TutorFSM.name)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–ò–º—è</b>:", reply_markup=kb_back_support())
    await call.answer()

# ======================= –†–ê–ó–î–ï–õ –î: –ú–û–ò –û–ë–™–Ø–í–õ–ï–ù–ò–Ø =======================
@router.callback_query(F.data == "menu_my_ads")
async def my_ads_menu(call: CallbackQuery):
    await call.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:",
        reply_markup=kb_my_ads_entry()
    )
    await call.answer()

@router.callback_query(F.data == "my_goods")
async def my_goods_start(call: CallbackQuery):
    uid = call.from_user.id
    cur.execute("SELECT id FROM goods WHERE user_id=? ORDER BY id DESC", (uid,))
    ids = [r[0] for r in cur.fetchall()]
    my_state[uid] = {"type": "goods", "ids": ids, "i": 0}
    if not ids:
        await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏.", reply_markup=kb_back_support())
        await call.answer()
        return
    await show_my_good_by_index(call.message, uid, 0)
    await call.answer()

async def show_my_good_by_index(target: Message, uid: int, idx: int):
    ids = my_state[uid]["ids"]
    ad_id = ids[idx]
    cur.execute("SELECT id, title, condition, description, price, photos, school FROM goods WHERE id=?", (ad_id,))
    row = cur.fetchone()
    if not row:
        await target.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_back_support())
        return
    photos = (row[5] or "").split(",") if row[5] else []
    caption = (
        f"<b>{row[1]}</b>\n"
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {row[2]}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {row[3]}\n"
        f"–¶–µ–Ω–∞: {row[4]}\n"
        f"–®–∫–æ–ª–∞/–í–£–ó: {row[6]}"
    )
    if photos:
        await target.answer_photo(photos[0], caption=caption, reply_markup=kb_my_ad_controls("goods", idx))
    else:
        await target.answer(caption, reply_markup=kb_my_ad_controls("goods", idx))

@router.callback_query(F.data == "my_tutors")
async def my_tutors_start(call: CallbackQuery):
    uid = call.from_user.id
    cur.execute("SELECT id FROM tutors WHERE user_id=? ORDER BY id DESC", (uid,))
    ids = [r[0] for r in cur.fetchall()]
    my_state[uid] = {"type": "tutors", "ids": ids, "i": 0}
    if not ids:
        await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.", reply_markup=kb_back_support())
        await call.answer()
        return
    await show_my_tutor_by_index(call.message, uid, 0)
    await call.answer()

async def show_my_tutor_by_index(target: Message, uid: int, idx: int):
    ids = my_state[uid]["ids"]
    ad_id = ids[idx]
    cur.execute("SELECT id, name, subject, school, achievements, details, price, photos FROM tutors WHERE id=?", (ad_id,))
    row = cur.fetchone()
    if not row:
        await target.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_back_support())
        return
    photos = (row[7] or "").split(",") if row[7] else []
    caption = (
        f"<b>{row[1]}</b>\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {row[2]}\n"
        f"–®–∫–æ–ª–∞/–í–£–ó: {row[3]}\n"
        f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {row[4]}\n"
        f"–û–±—É—á–µ–Ω–∏–µ: {row[5]}\n"
        f"–¶–µ–Ω–∞ (—Ä/—á–∞—Å): {row[6]}"
    )
    if photos:
        await target.answer_photo(photos[0], caption=caption, reply_markup=kb_my_ad_controls("tutors", idx))
    else:
        await target.answer(caption, reply_markup=kb_my_ad_controls("tutors", idx))

@router.callback_query(F.data.startswith("my_next_"))
async def my_next(call: CallbackQuery):
    _, ad_type, idx_str = call.data.split("_", 2)
    uid = call.from_user.id
    st = my_state.get(uid)
    if not st or st["type"] != ad_type:
        await call.message.answer("–°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=kb_back_support())
        await call.answer()
        return
    st["i"] = int(idx_str) + 1
    if st["i"] >= len(st["ids"]):
        await call.message.answer("–≠—Ç–æ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.", reply_markup=kb_back_support())
        await call.answer()
        return
    if ad_type == "goods":
        await show_my_good_by_index(call.message, uid, st["i"])
    else:
        await show_my_tutor_by_index(call.message, uid, st["i"])
    await call.answer()

@router.callback_query(F.data.startswith("my_edit_"))
async def my_edit(call: CallbackQuery, state: FSMContext):
    _, ad_type, idx_str = call.data.split("_", 2)
    uid = call.from_user.id
    idx = int(idx_str)
    ids = my_state.get(uid, {}).get("ids", [])
    if idx >= len(ids):
        await call.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_back_support())
        await call.answer()
        return
    ad_id = ids[idx]
    if ad_type == "goods":
        cur.execute("SELECT title, category, condition, description, price, photos, nickname, school FROM goods WHERE id=?", (ad_id,))
        row = cur.fetchone()
        if not row:
            await call.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_back_support())
            await call.answer()
            return
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–ª–æ—É –ø–æ –∫—Ä—É–≥—É
        await state.set_state(GoodFSM.title)
        await state.update_data(
            title=row[0], category=row[1], condition=row[2], description=row[3], price=row[4],
            photos=(row[5].split(",") if row[5] else []), nickname=row[6], school=row[7], editing_id=ad_id
        )
        await call.message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞. –í–≤–µ–¥–∏—Ç–µ <b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>:", reply_markup=kb_back_support())
    else:
        cur.execute("SELECT name, subject, school, achievements, details, price, photos, nickname FROM tutors WHERE id=?", (ad_id,))
        row = cur.fetchone()
        if not row:
            await call.message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb_back_support())
            await call.answer()
            return
        await state.set_state(TutorFSM.name)
        await state.update_data(
            name=row[0], subject=row[1], school=row[2], achievements=row[3], details=row[4],
            price=row[5], photos=(row[6].split(",") if row[6] else []), nickname=row[7], editing_id=ad_id
        )
        await call.message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ <b>–ò–º—è</b>:", reply_markup=kb_back_support())
    await call.answer()

# ======================= –£–¢–ò–õ–ò–¢–´ =======================
def get_good_by_id(ad_id: int) -> Optional[tuple]:
    cur.execute("SELECT id, title, condition, description, price, photos, nickname, school FROM goods WHERE id=?", (ad_id,))
    return cur.fetchone()

def get_tutor_by_id(ad_id: int) -> Optional[tuple]:
    cur.execute("SELECT id, name, subject, school, achievements, details, price, photos, nickname FROM tutors WHERE id=?", (ad_id,))
    return cur.fetchone()

# ----------------------- /help –∫–∞–∫ –¥—É–±–ª—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ -----------------------
@router.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer(f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞: {SUPPORT_NICK}", reply_markup=kb_back_support())

# ----------------------- RUN -----------------------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
